type: edu
files:
- name: src/metro/Main.java
  visible: true
  text: |-
    package metro;

    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import java.io.IOException;
    import java.io.Reader;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.*;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Main {
        public static void main(String[] args) {
            buildMap(args[0]).ifPresent(Main::parseCommands);
        }

        private static Optional<LinkedHashMap<String, Line>> buildMap(String fileLocation) {
            Path filePath = Paths.get(fileLocation);
            if (Files.notExists(filePath)) {
                System.out.println("Error! Such a file doesn't exist!");
                return Optional.empty();
            } else {
                try {
                    Reader reader = Files.newBufferedReader(filePath);
                    JsonObject root = JsonParser.parseReader(reader).getAsJsonObject();
                    LinkedHashMap<String, Line> lineMap = new LinkedHashMap<>();
                    // Transfers are hooked up once the lineMap is completed
                    ArrayList<String[]> transfersList = new ArrayList<>();
                    for (var obj: root.entrySet()) {
                        String lineName = obj.getKey().replace("\"", "");
                        Line line = new Line(lineName);
                        for (var entry : obj.getValue().getAsJsonObject().entrySet()) {
                            String stationName = entry.getValue().getAsJsonObject()
                                    .getAsJsonPrimitive("name")
                                    .getAsString().replace("\"", "");
                            JsonElement timeEntry = entry.getValue().getAsJsonObject()
                                    .get("time");
                            int time;
                            if (timeEntry == null || timeEntry.isJsonNull()) {
                                time = 0;
                            } else {
                                time = timeEntry.getAsInt();
                            }
                            line.appendStation(stationName, time);
                            JsonArray transfer = entry.getValue().getAsJsonObject()
                                    .getAsJsonArray("transfer");
                            if (transfer.size() != 0) {
                                String transferLine = transfer.get(0).getAsJsonObject()
                                        .get("line").getAsString().replace("\"", "");
                                String transferStation = transfer.get(0).getAsJsonObject()
                                        .get("station").getAsString().replace("\"", "");
                                transfersList.add(new String[]{lineName, stationName, transferLine, transferStation});
                            }
                        }
                        lineMap.put(lineName, line);

                    }
                    // Add transfers to all lines
                    for (String[] transferInfo : transfersList) {
                        lineMap.get(transferInfo[0]).addTransfer(transferInfo[1],
                                lineMap.get(transferInfo[2]),
                                transferInfo[3]);
                    }

                    return Optional.of(lineMap);
                } catch (IOException e) {
                    System.out.println("Incorrect file.");
                    return Optional.empty();
                }
            }
        }

        private static void parseCommands(LinkedHashMap<String, Line> lineMap) {
            Scanner scanner = new Scanner(System.in);
            while (true) {
                String command = scanner.nextLine();
                if ("/exit".equals(command)) {
                    break;
                } else {
                    // String parsing from: https://stackoverflow.com/a/7804472
                    List<String> parseList = new ArrayList<>();
                    Matcher m = Pattern.compile("([^\"]\\S*|\".+?\")\\s*").matcher(command);
                    while (m.find())
                        parseList.add(m.group(1).replace("\"", ""));
                    String[] commands = parseList.toArray(String[]::new);
                    if (commands.length == 2 && "/output".equals(commands[0])) {
                        if (lineMap.containsKey(commands[1])) {
                            lineMap.get(commands[1]).printLine();
                        } else {
                            System.out.println("Invalid command.");
                        }
                    } else if (commands.length == 3 && lineMap.containsKey(commands[1])) {
                        var line = lineMap.get(commands[1]);
                        switch (commands[0]) {
                            case "/append": {
                                line.appendStation(commands[2], 0);
                                break;
                            }
                            case "/add-head": {
                                line.addHead(commands[2], 0);
                                break;
                            }
                            case "/remove": {
                                if (!line.removeStation(commands[2])) {
                                    System.out.println("Invalid command.");
                                }
                                break;
                            }
                            default:
                                System.out.println("Invalid command.");
                                break;
                        }
                    } else if (commands.length == 4
                            && lineMap.containsKey(commands[1])
                            && "/add".equals(commands[0])){
                        var line = lineMap.get(commands[1]);
                        line.appendStation(commands[2], Integer.parseInt(commands[3]));
                    }
                    else if (commands.length == 5
                            && ("/connect".equals(commands[0])
                            || "/route".equals(commands[0])
                            || "/fastest-route".equals(commands[0]))
                            && lineMap.containsKey(commands[1])
                            && lineMap.containsKey(commands[3])) {
                        Line firstLine = lineMap.get(commands[1]);
                        Line secondLine = lineMap.get(commands[3]);
                        if ("/connect".equals(commands[0])) {
                            firstLine.addTransfer(commands[2], secondLine, commands[4]);
                            secondLine.addTransfer(commands[4], firstLine, commands[2]);
                        }
                        else if ("/route".equals(commands[0])) {
                            Line.printRoute(firstLine, commands[2], secondLine, commands[4]);
                        } else { //fastest route
                            Line.printFastestRoute(firstLine, commands[2], secondLine, commands[4]);
                        }
                    } else {
                        System.out.println("Invalid command.");
                    }
                }
            }
        }
    }
  learner_created: false
- name: test/london.json
  visible: false
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class Tests extends StageTest<String> {
        @DynamicTest(order = 1)
        CheckResult simpleRouteTest() {
            TestedProgram main = new TestedProgram();
            main.start("./test/london.json");

            String output = main.execute("/route \"Waterloo & City line\" \"Waterloo\" \"Waterloo & City line\" \"Bank\"");
            String[] sOutput = output.trim().split("\n");

            if (sOutput.length != 2) {
                return CheckResult.wrong("There is an incorrect number of station in the route");
            }

            if (!sOutput[0].trim().equals("Waterloo") || !sOutput[1].trim().equals("Bank")) {
                return CheckResult.wrong("There are incorrect stations in the route");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult severalLinesRoute() {
            TestedProgram main = new TestedProgram();
            main.start("./test/london.json");

            String output = main.execute("/route \"Victoria line\" \"Victoria\" \"Northern line\" \"Oval\"");
            String[] sOutput = output.toLowerCase().split("\n");

            String[] route = {"Victoria", "Pimlico", "Vauxhall", "Stockwell", "Northern line", "Stockwell", "Oval"};

            if (sOutput.length != route.length) {
                return CheckResult.wrong("There is an incorrect number of station in the route");
            }

            if (assertRoute(sOutput, route)) {
                return CheckResult.wrong("The route is incorrect. Wrong stations were displayed");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult severalLines() {
            TestedProgram main = new TestedProgram();
            main.start("./test/london.json");

            String output = main.execute("/route \"Victoria line\" \"Green Park\" \"Northern line\" \"Oval\"");
            String[] sOutput = output.toLowerCase().split("\n");

            String[] route = {"Green Park", "Jubilee line", "Green Park", "Westminster", "Waterloo",
                "Northern line", "Waterloo", "Kennington", "Oval"};

            if (sOutput.length != route.length) {
                return CheckResult.wrong("There is an incorrect number of station in the route");
            }

            if (assertRoute(sOutput, route)) {
                return CheckResult.wrong("The route is incorrect. Wrong stations were displayed.");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 4)
        CheckResult forkTest() {
            TestedProgram main = new TestedProgram();
            main.start("./test/london.json");

            String output = main.execute("/route \"Piccadilly line\" \"Heathrow Terminal 5\" " +
                "\"Piccadilly line\" \"Hounslow West\"");
            String[] sOutput = output.toLowerCase().split("\n");

            String[] route = {"Heathrow Terminal 5", "Heathrow Terminals 1-2-3", "Hatton Cross", "Hounslow West"};

            if (sOutput.length != route.length) {
                return CheckResult.wrong("There is an incorrect number of station in the route");
            }

            if (assertRoute(sOutput, route)) {
                return CheckResult.wrong("The route is incorrect. Wrong stations were displayed.");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult forkTest2() {
            TestedProgram main = new TestedProgram();
            main.start("./test/london.json");

            String output = main.execute("/route \"Piccadilly line\" \"Hatton Cross\" " +
                "\"Piccadilly line\" \"Heathrow Terminal 4\"");
            String[] sOutput = output.toLowerCase().split("\n");

            String[] route = {"Hatton Cross", "Heathrow Terminal 4"};

            if (sOutput.length != route.length) {
                return CheckResult.wrong("There is an incorrect number of station in the route");
            }

            if (assertRoute(sOutput, route)) {
                return CheckResult.wrong("The route is incorrect. Wrong stations were displayed. The fork was ignored.");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult simpleTimeTest() {
            TestedProgram main = new TestedProgram();
            main.start("./test/london.json");

            String output = main.execute("/fastest-route \"District line\" \"Richmond\" \"District line\" \"Gunnersbury\"");
            String[] sOutput = output.toLowerCase().split("\n");

            String[] route = {"Richmond", "Kew Gardens", "Gunnersbury", "12"};

            if (sOutput.length != route.length) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route. Expected 3 stations and the total time!");
            }

            if (!sOutput[sOutput.length - 1].contains(route[route.length - 1])) {
                return CheckResult.wrong("The program incorrectly calculates the trip duration.");
            }

            if (assertRoute(sOutput, route)) {
                return CheckResult.wrong("The route is incorrect. Wrong stations were displayed.");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 7)
        CheckResult advancedTimeTest() {
            TestedProgram main = new TestedProgram();
            main.start("./test/london.json");

            String output = main.execute("/fastest-route \"Victoria line\" \"Brixton\" \"Northern line\" \"Angel\"");
            String[] sOutput = output.toLowerCase().split("\n");

            String[] route = {"Brixton", "Stockwell", "Northern line", "Stockwell", "Oval", "Kennington", "Waterloo",
                "Waterloo & City line", "Waterloo", "Bank",
                "Northern line", "Bank", "Moorgate", "Old Street", "Angel", "47"};

            if (sOutput.length != route.length) {
                return CheckResult.wrong("Your program printed an incorrect number of stations in the route. Expected 9 stations, 3 transitions and the total time!");
            }

            if (!sOutput[sOutput.length - 1].contains(route[route.length - 1])) {
                return CheckResult.wrong("The program incorrectly calculates the trip duration. " +
                    "Maybe the wrong way was chosen.");
            }

            if (assertRoute(sOutput, route)) {
                return CheckResult.wrong("The route is incorrect. Wrong stations were displayed. " +
                    "Maybe the wrong way was chosen.");
            }

            return CheckResult.correct();
        }

        boolean assertRoute(String[] stations, String[] correctRoute) {
            int index = 0;
            for (String station : stations) {
                if (!station.toLowerCase().trim().contains(correctRoute[index].toLowerCase())) {
                    return true;
                }
                index++;
            }
            return false;
        }
    }
  learner_created: false
- name: src/metro/HyperMetro.java
  visible: true
  text: |-
    package metro;

    import lombok.Getter;
    import lombok.Setter;
    import java.util.ArrayDeque;
    import java.util.ArrayList;
    import java.util.Comparator;
    import java.util.HashSet;
    import java.util.Objects;
    import java.util.Optional;
    import java.util.PriorityQueue;

    @Getter
    public class HyperMetro {
        private final String name;
        private final Station depot;

        public HyperMetro(String name) {
            this.name = name;
            this.depot = new Station("depot");
            this.depot.setNext(this.depot);
            this.depot.setPrevious(this.depot);
        }

        public void append(String name,
                           int time) {
            var prev =
                    this.depot.getPrevious();
            var newSt = new Station(name);
            prev.setNext(newSt);
            this.depot.setPrevious(newSt);
            this.depot.setPreviousTime(time);
            newSt.setPrevious(prev);
            newSt.setPreviousTime(prev.getNextTime());
            newSt.setNext(depot);
            newSt.setNextTime(time);
        }

        public void addHead(String name,
                            int time) {
            var next = this.depot.getNext();
            var newSt = new Station(name);
            next.setPrevious(newSt);
            next.setPreviousTime(time);
            this.depot.setNext(newSt);
            newSt.setPrevious(this.depot);
            newSt.setNext(next);
            newSt.setNextTime(time);
        }

        public boolean remove(String name) {
            var candidate =
                    getStation(name);
            if (candidate.isPresent()) {
                var prev =
                        candidate.get().getPrevious();
                var next =
                        candidate.get().getNext();
                prev.setNext(next);
                next.setPrevious(prev);
                next.setPreviousTime(prev.getNextTime());
                candidate
                        .get()
                        .getTransfer()
                        .ifPresent(s -> s.setTransfer(null));
                return true;
            } else {
                return false;
            }
        }

        public void addTransfer(String name,
                                HyperMetro metro,
                                String transfer) {
            var candidate =
                    getStation(name);
            var other =
                    metro.getStation(transfer);
            if (candidate.isPresent() &&
                    other.isPresent()) {
                var station = candidate.get();
                var transferSt = other.get();
                station.setTransfer(transferSt);
            }
        }

        public void printLine() {
            var current = this.depot;
            System.out.println(current.getName());
            if (current.getNext() == this.depot) {
                return;
            }
            current = current.getNext();
            while (current != this.depot) {
                if (current.getTransfer().isPresent()) {
                    System.out.printf(
                            "%s - %s - (%s)%n",
                            current.getName(),
                            current
                                    .getTransfer()
                                    .get()
                                    .getName(),
                            current
                                    .getTransfer()
                                    .get()
                                    .getLineName());
                } else {
                    System.out.println(current.getName());
                }
                current = current.getNext();
            }
            System.out.println(current.getName());
        }

        private static Optional<ArrayList<Direction>>
                                                  route
                                            (HyperMetro metro1,
                                            String go,
                                            HyperMetro metro2,
                                            String stop) {
            class Route {
                final Station station;
                final ArrayList<Direction> dirList;
                public Route(Station station,
                             ArrayList<Direction> dirList,
                             Direction direction) {
                    this.station = station;
                    this.dirList = new ArrayList<>(dirList);
                    if (direction != null)
                        this.dirList.add(direction);
                }
            }
            ArrayDeque<Route> queue = new ArrayDeque<>();
            HashSet<Station> visited = new HashSet<>();
            var startSt =
                    metro1.getStation(go);
            var endSt =
                    metro2.getStation(stop);
            if (startSt.isPresent() && endSt.isPresent()) {
                queue.add(new Route(
                        startSt.get(),
                        new ArrayList<>(),
                        null));
                visited.add(startSt.get());
                startSt
                        .get()
                        .getTransfer()
                        .ifPresent(visited::add);
                while (!queue.isEmpty()) {
                    var current = queue.pollFirst();
                    if (current.station.equals(endSt.get())) {
                        return Optional.of(current.dirList);
                    } else {
                        var currentSt =
                                current.station;
                        if (!currentSt.getName().equals("depot")) { //depots are sinks on the graph
                            if (!visited
                                    .contains(currentSt.getNext())) {
                                queue.add(new Route(
                                        currentSt.getNext(),
                                        current.dirList,
                                        Direction.Next));
                                visited.add(currentSt.getNext());
                                currentSt
                                        .getTransfer()
                                        .ifPresent(visited::add);
                            }
                            if (!visited.contains(
                                    currentSt.getPrevious())) {
                                queue.add(new Route(
                                        currentSt.getPrevious(),
                                        current.dirList,
                                        Direction.Previous));
                                visited.add(currentSt.getPrevious());
                                currentSt
                                        .getTransfer()
                                        .ifPresent(visited::add);
                            }
                            if (currentSt
                                    .getTransfer()
                                    .isPresent()) {
                                currentSt = currentSt
                                        .getTransfer()
                                        .get();
                                ArrayList<Direction> transferList =
                                        new ArrayList<>(current.dirList);
                                transferList.add(Direction.Transfer);
                                if (!visited.contains(currentSt.getNext())) {
                                    queue.add(new Route(
                                            currentSt.getNext(),
                                            transferList,
                                            Direction.Next));
                                    visited.add(currentSt.getNext());
                                    currentSt
                                            .getTransfer()
                                            .ifPresent(visited::add);
                                }
                                if (!visited.contains(currentSt.getPrevious())) {
                                    queue.add(new Route(
                                            currentSt.getPrevious(),
                                            transferList,
                                            Direction.Previous));
                                    visited.add(currentSt.getPrevious());
                                    currentSt
                                            .getTransfer()
                                            .ifPresent(visited::add);
                                }
                            }
                        }
                    }
                }
            }
            return Optional.empty();
        }

        public static void printRoute(HyperMetro metro1,
                                      String go,
                                      HyperMetro metro2,
                                      String stop) {
            var route = route(
                    metro1,
                    go,
                    metro2,
                    stop);
            if (route.isPresent()) {
                var current =
                        metro1.getStation(go).get();
                for (var direction : route.get()) {
                    System.out.println(current.getName());
                    switch (direction) {
                        case Next ->
                                current = current.getNext();
                        case Previous ->
                                current = current.getPrevious();
                        case Transfer ->
                        {
                            current = current.getTransfer().get();
                            System.out.printf(
                                    "Transition to line %s%n",
                                    current.getLineName());
                        }
                    }
                }
                System.out.println(current.getName());
            } else {
                System.out.println("No route exists!");
            }
        }
        private static Optional<ArrayList<Direction>>
                                                fastestRoute
                                               (HyperMetro metro1,
                                               String go,
                                               HyperMetro metro2,
                                               String stop) {

            class Route {
                final Station station;
                final ArrayList<Direction> dirList;
                final int time;

                public Route(Station station,
                             ArrayList<Direction> dirList,
                             Direction direction,
                             int time) {
                    this.station = station;
                    this.dirList = new ArrayList<>(dirList);

                    if (direction != null)
                        this.dirList.add(direction);
                    this.time = time;
                }
            }
            PriorityQueue<Route> queue =
                    new PriorityQueue<>(
                            Comparator.comparingInt(
                                    (Route r) -> r.time));
            HashSet<Station> visited = new HashSet<>();
            var startSt =
                    metro1.getStation(go);
            var endSt =
                    metro2.getStation(stop);
            if (startSt.isPresent() &&
                    endSt.isPresent()) {
                queue.add(new Route(
                        startSt.get(),
                        new ArrayList<>(),
                        null,
                        0));
                while (!queue.isEmpty()) {
                    Route current = queue.poll();
                    if (visited.contains(current.station)) {
                    } else if
                    (current.station.equals(endSt.get())) {
                        return Optional.of(current.dirList);
                    } else {
                        var currentSt =
                                current.station;
                        visited.add(currentSt);
                        if (!currentSt
                                .getName()
                                .equals("depot")) {
                            if (!visited.contains(currentSt.getNext())) {
                                queue.add(new Route(
                                        currentSt.getNext(),
                                        current.dirList,
                                        Direction.Next,
                                        current.time +
                                                currentSt.getNextTime()));
                            }
                            if (!visited.contains(
                                    currentSt.getPrevious())) {
                                queue.add(new Route(
                                        currentSt.getPrevious(),
                                        current.dirList,
                                        Direction.Previous,
                                        current.time +
                                        currentSt.getPreviousTime()));
                            }
                            if (currentSt
                                    .getTransfer()
                                    .isPresent() &&
                                    !visited.contains(currentSt
                                                    .getTransfer()
                                                    .get())) {
                                queue.add(new Route(
                                        currentSt.getTransfer().get(),
                                        current.dirList,
                                        Direction.Transfer,
                                        current.time +
                                        currentSt.getTransferTime()));
                            }
                        }
                    }
                }
            }
            return Optional.empty();
        }

        public static void printFastestRoute(HyperMetro metro1,
                                             String go,
                                             HyperMetro metro2,
                                             String stop) {
            var route = fastestRoute(
                            metro1,
                            go,
                            metro2,
                            stop);
            if (route.isPresent()) {
                var current =
                        metro1.getStation(go).get();
                int ended = 0;
                for (var direction : route.get()) {
                    System.out.println(current.getName());
                    switch (direction) {
                        case Next ->
                        {
                            ended += current.getNextTime();
                            current = current.getNext();
                        }
                        case Previous ->
                        {
                            ended += current.getPreviousTime();
                            current = current.getPrevious();
                        }
                        case Transfer ->
                        {
                            ended += current.getTransferTime();
                            current = current.getTransfer().get();
                            System.out.printf(
                                    "Transition to line %s%n",
                                    current.getLineName());
                        }
                    }
                }
                System.out.println(current.getName());
                System.out.printf(
                        "Total: %d minutes in the way%n",
                        ended);
            } else {
                System.out.println("No route exists!");
            }
        }

        private Optional<Station> getStation(String name) {
            var currentSt = this.depot.getNext();
            while (currentSt != this.depot) {
                if (currentSt.getName().equals(name)) {
                    return Optional.of(currentSt);
                }
                currentSt = currentSt.getNext();
            }
            return Optional.empty();
        }

        private enum Direction {Next, Previous, Transfer}

        @Getter
        @Setter
        private class Station {
            private final String name;
            private Station previous;
            private int previousTime;
            private Station next;
            private int nextTime;
            private Station transfer;
            private final int transferTime = 5;

            private Station(String name) {
                this.name = name;
                this.previous = null;
                this.next = null;
                this.transfer = null;
            }

            public String getLineName() {
                return HyperMetro.this.name;
            }

            public Optional<Station> getTransfer() {
                return Optional.ofNullable(this.transfer);
            }

            @Override
            public int hashCode() {
                return Objects.hash(HyperMetro.this.name,
                        this.name);
            }

            @Override
            public boolean equals(Object o) {
                if (this == o) {
                    return true;
                } else if (o == null) {
                    return false;
                } else if
                (this.getClass() != o.getClass()) {
                    return false;
                } else {
                    var otherSt = (Station) o;
                    return this.name.equals(otherSt.name)
                            &&
                            HyperMetro.this.name.equals(
                                    otherSt.getLineName());
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10346#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 07 Nov 2022 14:54:56 UTC
record: -1
